---
import TaskItem from './TaskItem.svelte';
import TaskFilters from './TaskFilters.svelte';
import { type ITask } from '../types/task';
import { actions } from "astro:actions";

let tasks: ITask[] = [];
let errorText = '';

const params = new URLSearchParams(Astro.url.search);
const filters = {
  priority: params.get('priority') || '',
  isCompleted: params.get('isCompleted') === 'true' || '',
};

const fetchTasks = async () => {
  const { data, error } = await Astro.callAction(actions.fetchTasks, { filters });
  if (data) {
    tasks = data.tasks ?? [];
    errorText = data.error ?? '';
  } else if (error) {
    console.error(error);
  }
};

await fetchTasks();
---

<ul>
  <TaskFilters filter={filters} client:load />
  {tasks?.map(task => (
      <TaskItem task={task} client:load />
  ))}
  {errorText && <div class="p-4 my-4 text-sm text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400" role="alert">
    {errorText}
  </div>}
</ul>
